install.packages("ROCR")
install.packages(c("MASS", "mgcv", "nlme", "survival"))
q()
setwd("/Users/udayshankar/Desktop/Analytics Edge/Week3")
quality <- read.csv(file.choose())
library("caTools")
library("ROCR")
set.seed(88)
split <- sample.split(quality$PoorCare,0.75)
qulaity_train <- subset(quality,split == TRUE)
qulaity_test <- subset(quality,split == FALSE)
qualitylog <- glm(PoorCare ~ OfficeVisits + Narcotics, data = quality_train)
rm(qulaity_test)
rm(qulaity_train)
qualitylog <- glm(PoorCare ~ OfficeVisits + Narcotics, data = quality_train,family = binomial)
summary(qualitylog)
predict_train <- predict(qualitylog,type = "response")
summary(predict_train)
tapply(predict_train,quality_train$PoorCare,mean)
quality_test <- subset(quality,split == FALSE)
quality_train <- subset(quality,split == TRUE)
qualitylog <- glm(PoorCare ~ OfficeVisits + Narcotics, data = quality_train,family = binomial)
summary(qualitylog)
predict_train <- predict(qualitylog,type = "response")
summary(predict_train)
tapply(predict_train,quality_train$PoorCare,mean)
load("/Users/udayshankar/Desktop/Analytics Edge/Week3/.RData")
table(quality_train$PoorCare,predict_train>0.7)
sensitivity <- 7/25
specificity <- 73/74
table(quality_train$PoorCare,predict_train>0.2)
rocrpred <- prediction(predict_train,quality_train$PoorCare)
rocrperf <- performance(rocrpred,"tpr","fpr")
plot(rocrperf)
plot(rocrperf,colorize = TRUE)
plot(rocrperf,colorize = TRUE,print.cutoffs.at = seq(0,1,0.1),text.adj=c(-0.2,1.7))
# Randomly split data
set.seed(88)
split = sample.split(quality$PoorCare, SplitRatio = 0.75)
split
# Create training and testing sets
qualityTrain = subset(quality, split == TRUE)
qualityTest = subset(quality, split == FALSE)
# Logistic Regression Model
QualityLog = glm(PoorCare ~ OfficeVisits + Narcotics, data=qualityTrain, family=binomial)
summary(QualityLog)
# Make predictions on training set
predictTrain = predict(QualityLog, type="response")
# Analyze predictions
summary(predictTrain)
tapply(predictTrain, qualityTrain$PoorCare, mean)
# Video 5
# Confusion matrix for threshold of 0.5
table(qualityTrain$PoorCare, predictTrain > 0.5)
# Sensitivity and specificity
10/25
70/74
# Confusion matrix for threshold of 0.7
table(qualityTrain$PoorCare, predictTrain > 0.7)
# Sensitivity and specificity
8/25
73/74
# Confusion matrix for threshold of 0.2
table(qualityTrain$PoorCare, predictTrain > 0.2)
# Sensitivity and specificity
16/25
54/74
predict_test <- predict(qualitylog,type = "response",newdata = quality_test)
rocrtest <- prediction(predict_test,quality_test$PoorCare)
auc <- as.numeric(performance(rocrtest,"auc")@y.values)
auc
framingham <- read.csv(file.choose())
rm(list = ls())
framingham <- read.csv(file.choose())
set.seed(1000)
split <- sample.split(framingham$TenYearCHD,SplitRatio = 0.65)
framinghamtrain <- subset(framingham, split == TRUE)
framinghamtest <- subset(framingham, split == FALSE)
framinghamlog <- glm(TenYearCHD ~ ., data = framinghamtrain)
summary(framinghamlog)
rm(framinghamlog)
framinghamlog <- glm(TenYearCHD ~ ., data = framinghamtrain, family = binomial)
rm(framinghamlog)
framinghamlog <- glm(TenYearCHD ~ ., data = framinghamtrain, family = binomial)
rm(framinghamlog)
framinghamlog <- glm(TenYearCHD ~ ., data = framinghamtrain, family = binomial)
summary(framinghamlog)
predicttest <- predict(framinghamlog,type = "response", newdata = framinghamtest)
table(framinghamtest$TenYearCHD,predicttest>0.5)
(1069+11)/(1069+6+187+11)
(1069+6)/(1069+6+187+11)
framinghamtest2 <- na.omit(framinghamtest)
framinghamtrain2 <- na.omit(framinghamtrain)
framinghamlog2 <- glm(TenYearCHD ~ ., data = framinghamtrain2, family = binomial)
predicttest2 <- predict(framinghamlog2,type = "response", newdata = framinghamtest2)
rocrpred <- prediction(predicttest2,framinghamtest2$TenYearCHD)
auc <- as.numeric(performance(rocrpred,"auc")@y.values)
auc
(1069)/(1069+6)
(11)/(198)
rm(list = ls())
pollingdata <- read.csv(file.choose())
View(pollingdata)
summary(pollingdata)
install.packages("mice")
library(mice)
simple <- pollingdata[,c(3:5)]
View(simple)
summary(simple)
set.seed(144)
imputed <- complete(mice(simple))
summary(imputed)
pollingdata$Rasmussen <- imputed$Rasmussen
pollingdata$SurveyUSA <- imputed$SurveyUSA
summary(pollingdata)
train <- subset(pollingdata,Year == 2004 | Year == 2008)
train <- subset(pollingdata,Year == 2012)
train <- subset(pollingdata,Year == 2004 | Year == 2008)
test <- subset(pollingdata,Year == 2012)
table(train$Republican)
table(sign(train$Republican))
table(sign(train$Rasmussen))
ls()
ls(imputed)
rm(list = ls())
songs <- read.csv(file.choose())
str(songs)
summary(songs)
nrow(songs$year == 2010)
nrow(songs$year == "2010")
table(songs$year)
table(songs$artistname)
table(songs$artistname == "Michael Jackson")
table(songs$artistname == "Michael Jackson", songs$Top10)
summary(table(songs$artistname == "Michael Jackson", songs$Top10))
names(table(songs$artistname == "Michael Jackson", songs$Top10))
table(songs$artistname == "Michael Jackson")
table(songs$artistname == "Michael Jackson", songs$Top10,songs$songtitle)
x <- table(songs$artistname == "Michael Jackson", songs$Top10,songs$songtitle)
x
table(songs$artistname == "Michael Jackson", songs$Top10,songs$songtitle) == TRUE
tapply(songs$artistname == "Michael Jackson", songs$Top10,songs$songtitle)
tapply(songs$artistname == "Michael Jackson", songs$Top10)
subset(songs$artistname == "Michael Jackson",songs$songtitle,songs$Top10 == 1)
songs(subset(songs$artistname == "Michael Jackson",songs$Top10 == 1))$songtitle
subset(songs$artistname == "Michael Jackson",songs$Top10 == 1))
subset(songs$artistname == "Michael Jackson",songs$Top10 == 1)
x <- subset(songs$artistname == "Michael Jackson",songs$Top10 == 1)
songs$songtitle[x]
x <- subset(songs$artistname == "Michael Jackson",songs$Top10 == TRUE)
songs$songtitle[x]
y <- songs$songtitle[x]
y
x <- subset(songs$artistname == "Michael Jackson",songs$Top10 == 1)
y <- songs$songtitle[x]
y
x <- which(songs$artistname == "Michael Jackson",songs$Top10 == 1)
x
y <- songs$songtitle[x]
y
x <- which(songs$artistname == "Michael Jackson",songs$Top10 == 1,songs$year == 2010)
y <- songs$songtitle[x]
y
x <- which(songs$artistname == "Michael Jackson",songs$songtitle,songs$year == 2010)
x <- which(songs$artistname == "Michael Jackson",songs$Top10 == 1)
y <- songs$songtitle[x]
y
songs$artistname == "Michael Jackson"[c("songtitle","Top10")]
x <- subset(songs$artistname == "Michael Jackson",songs$Top10 == 1)
x <- which(songs$artistname == "Michael Jackson",songs$Top10 == 1)
x <- which(songs$artistname == "Michael Jackson",songs$Top10 == 1)
y <- songs$songtitle[x]
y
x <- which(songs$Top10 == 1,songs$artistname == "Michael Jackson")
y <- songs$songtitle[x]
y
mj <- subset(songs,artistname == "Michael Jackson")
mj$songtitle[mj$Top10 == 1]
str(songs$timesignature)
summary(songs$timesignature)
unique(songs$timesignature)
table(songs$timesignature)
names(songs)
which.max(songs$tempo)
songs[6206]
songs[6206,]
songs[6206,c(1:2)]
songstrain <- subset(songs, Year <= 2009)
songstrain <- subset(songs, year <= 2009)
songstest <- subset(songs, year > 2009)
nonvars <- c("year","songtitle","artistname","songID","artistID")
songstrain <- songstrain[,!(names(songstrain) %in% nonvars)]
songstest <- songstest[,!(names(songstest) %in% nonvars)]
songslog1 <- glm(Top10~.,data = songstrain,family = binomial)
summary(songslog1)
cor(songstrain$loudness,songstrain$energy)
songslog2 <- glm(Top10~.-loudness,data = songstrain,family = binomial)
songslog3 <- glm(Top10~.-energy,data = songstrain,family = binomial)
summary(songslog2)
summary(songslog3)
testpred <- predict(songslog3,newdata = songstest,type = "response")
table(songstest$Top10,testpred>=0.45)
(309+19)/(309+5+40+19)
baseline <- predict(songslog1,newdata = songstest,type = "response")
table(songstest$Top10,baseline>=0.45)
(309+15)/(309+5+44+15)
table(songstest$Top10,sign(songstest$loudness))
59/314
59/(314+59)
314/(314+59)
table(songstest$Top10,testpred>=0.45)
309/314
19/59
rm(list = ls())
parole <- read.csv(file.choose())
table(parole$violator == 1)
str(parole)
parole$state <- as.factor(parole$state)
parole$crime <- as.factor(parole$crime)
str(parole)
table(parole$state)
str(parole$state)
summary(parole)
set.seed(144)
library(caTools)
split <- sample.split(parole$violator,SplitRatio = 0.7)
train <- subset(parole,split==TRUE)
test <- subset(parole,split==FALSE)
plog1 <- glm(violator~.,data = train,family = binomial)
summary(plog1)
exp(plog1$coefficients)
summary(plog1)
plog1 <- glm(violator~.,data = train,family = binomial)
summary(plog1)
(-4.2411574 + 0.3869904 + 0.8867192 - 0.0001756*50 - 0.1238867*3 + 0.0802954*12 + 0.6837143)
log(-4.2411574 + 0.3869904 + 0.8867192 - 0.0001756*50 - 0.1238867*3 + 0.0802954*12 + 0.6837143)
exp(-1.700629)
1/(1+0.1825687)
1-0.8456168
testpred <- predict(plog1,newdata = test,type = "response")
summary(testpred)
table(test$violator,testpred>=0.5)
167/179
12/23
179/(167+35)
table(test$violator == 0)
179/(179+23)
table(test$violator,testpred>=0.4)
179/(166+10+26)
auc <- as.numeric(performance(testpred,"auc")@y.values)
rocrpred <- prediction(testpred,test$violator)
auc <- as.numeric(performance(rocrpred,"auc")@y.values)
auc
rm(list = ls())
loans <- read.csv(file.choose())
str(loans)
table(loans$not.fully.paid)
1533/(1533+8045)
summary(loans)
library(mice)
set.seed(144)
vars_for_imputation <- setdiff(names(loans),"not.fully.paid")
imputed <- complete(mice(loans[vars_for_imputation]))
set.seed(144)
split <- sample.split(loans$not.fully.paid,0.70)
train <- subset(loans,split == TRUE)
test <- subset(loans,split == FALSE)
log1 <- glm(not.fully.paid~.,data = train, family = binomial)
split <- sample.split(imputed$not.fully.paid,0.70)
summary(log1)
summary(loans)
summary(log1)
exp(coef(log1))
a <- 8534.4601933 + 0.7055122 + 1.3384002 + 1.0012798 + 0.6587359 + 1.0050547 + 0.9907354*700 + 1.0000012 + 1.0000031 + 1.0018665 + 1.0878803 + 0.9178014 + 1.3988949
a
b <- 8534.4601933 + 0.7055122 + 1.3384002 + 1.0012798 + 0.6587359 + 1.0050547 + 0.9907354*710 + 1.0000012 + 1.0000031 + 1.0018665 + 1.0878803 + 0.9178014 + 1.3988949
b
exp(a)
a-b
a/b
testpred <- predict(log1,newdata = test,type = "response")
summary(testpred)
table(test$not.fully.paid,testpred>=0.5)
2390/(2390+467)
table(test$not.fully.paid)
table(test$not.fully.paid == 0)
test$predicted_risk <- table(test$not.fully.paid,testpred>=0.5)
test$predicted_risk <- (test$not.fully.paid,testpred>=0.5)
2413/(2413+460)
test$predicted_risk <- predict(log1,newdata = test, type = "response")
rocrpred <- prediction(testpred,test$not.fully.paid)
rocrpred <- prediction(testpred,test$predicted_risk)
testpred <- na.omit(predict(log1,newdata = test,type = "response"))
rocrpred <- prediction(testpred,test$predicted_risk)
test$predicted_risk <- na.omit(predict(log1,newdata = test, type = "response"))
test$predicted_risk <- predict(log1,newdata = test, type = "response")
rocrpred <- prediction(testpred,test$predicted_risk)
log2 <- glm(not.fully.paid~int.rate,data = train, family = binomial)
summary(log2)
testpred2 <- predict(log2,newdata = test,type = "response")
summary(testpred2)
table(test$not.fully.paid,testpred2>0.5)
table(test$not.fully.paid,testpred2>=0.5)
rocrpred <- prediction(testpred2,test$not.fully.paid)
auc <- as.numeric(performance(rocrpred,"auc")@y.values)
auc
10*exp(0.6*3)
10*exp(6*3)
10*exp(1.6*3)
10+10*exp(0.6*3)
10+10*exp(0.06*3)
10*exp(0.06*3)
test$profit <- exp(test$int.rate*3)-1
test$profit[test$not.fully.paid == 1] <- -1
max(test$profit)
View(test)
highinterest <- subset(test, int.rate >= 0.15)
mean(highinterest$profit)
table(highinterest$not.fully.paid == 1)
110/437
cutoff <- sort(highinterest$predicted_risk,decreasing = FALSE)[100]
selected <- subset(highinterest,predicted_risk = cutoff)
selected <- subset(highinterest, cutoff)
selected <- subset(highinterest, predicted_risk < cutoff)
selected <- subset(highinterest, predicted_risk =< cutoff)
selected <- subset(highinterest, predicted_risk <= cutoff)
sum(selected$profit)
table(selected$not.fully.paid == 1)
max(selected$profit)
mean(selected$profit)
View(selected)
sum(selected[selected$not.fully.paid == 1]$profit)
sum(selected$not.fully.paid == 1$profit)
tapply(selected$profit,selected$not.fully.paid == 1,sum)
